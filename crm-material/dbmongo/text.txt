Creazione del progetto:

1- dal terminale 'npm init -y' (crea un package-json).
2- creare il file 'index.js' che sarà l'entry point dell'applicazione.
3- dal terminale 'npm i --save express' per installare express
4- in file.js importare express nell'index.js con 'import express from 'express'
 oppure con 'const express = require('express)' nel caso si utilizzasse
 la prima sintassi nel package.json sotto 'main' si aggiunge
 '"type":"module"' per importare il modulo'
5- in file.js creare una costante 'const app = express()' cosi richiamiamo la funzione
 express con tutte le sue funzionalità.
6- in file.js 'const PORT = 3000' per richiamare la porta
7- in file.js 'app.listen(PORT, ()=>{'console.log('server running on port: ${PORT}')
})' in questo modo richiamiamo la variabile app e la mettiamo in ascolto sulla
porta dichiarata con una funzione
8- da terminale 'npm i --save-dev nodemon' con questo comando si installa noodemon
che serve ad aggiornare dinamicamente il server, per farlo funzionare in
packahe.json impostare sotto 'type': ' "scripts": {
    "start": "nodemon index.js"
  },' cosi facendo lanciando il comando da terminale 'npm start si avvierà il serve dinamico'

  Creazione del primo routes:

  1- in index.js 'app.get("/", (req, res) => {
  console.log("chiamata GET homepage");

  res.send("benvenuto nella homepage");
});' questa è una chiamata con una 'richiesta (req)' e la 'risposta (res)',
con questo codice se è tutto corretto alla porta definita riceveremo il messaggio
della (res)
2- per gestire tutti i routes creare una cartella routes e un file ad esempio
'users.js" che gestirà le routes solo per gli oggetti users.
3- nel file appena creato inserire il seguente codice iniziale:
const router = express.Router();

let users = [
  {
    nome: "Luca",
    cognome: "Rossi",
    email: "luca.rossi@gmail.it",
  },
  {
    nome: "Marco",
    cognome: "Verdi",
    email: "marco.verdi@gmail.it",
  },
];

router.get("/", (req, res) => {
  console.log(users);
  res.send(users);
});

export default router;
questa è la base.
4- in index.js aggiungere l'import del file:'import usersRoutes from "./routes/users.js";' che ho esportato con la riga:
'export default router;'
5- in index.js aggiungere 'app.use("/users", usersRoutes);' per dire all'applicazione che
ogni volta che intercetta una chiamata per qualsiasi url che inizia per '/users'
voglio che sia gestita dal router 'app.use("/users", usersRoutes);'
se dovessero esserci ulteriori oggetti verranno specificati altri routes.
6- 'app.use("/users", usersRoutes);' è l'entry point e in users.js è settatto:
'router.get("/", (req, res) => {
  console.log(users);
  res.send(users);
});' di conseguenza sarà una chiamata di default

POST

7- in users.js per fare una chiamata post impostiamo la routes: "router.post("/", (req, res) => {
  const user = req.body;

  users.push(user);

  res.send(`Utente con email ${user.email} è stato aggiunto con successo`);
});", req.body permette di prendere i dati dalla richiesta, per gestire req.body
nel file index.js aggiungendo 'app.use(express.json());' per poter accedere al body e poterlo usare.

GET BY ID

8- Per affibiare un id casuale univoco prima di utilizzare il db mongo è possibile utilizzare
il pacchetto npm uuid, 'npm instal uuid' e si importa l'import in users.js che poi verrà richiamato
9- in users.js 'router.post("/", (req, res) => {
  const user = req.body;

  users.push({ ...user, id: uuidv4() });

  res.send(`Utente con email ${user.email} è stato aggiunto con successo`);
});' in questo modo quando pusho un nuovo ogetto viene fatto lo spread operator
che aggiunge un id univoco con uuid
10- in users.js 'router.get("/:id", (req, res) => {
  const { id } = req.params;

  const userTrovato = users.find((user) => user.id == id);

  res.send(userTrovato);
});' i due punti prima dell'id stanno a indicare che il parametro è dinamico,
11- const { id } = req.params questa riga è la distruzione dell'ogetto, fa in modo di creare un ogetto id prendendo
l'ogetto req.params.id, sostanzialmente prende l'id da req.params.id




